// Begin AutoGenerated Includes - DO NOT EDIT BELOW

lv_task_t* tmr_b5ca5;
void lv_task_b5ca5(struct _lv_task_t *data) {
    loop_b5ca5();
}
// End AutoGenerated Includes - DO NOT EDIT ABOVE

#include <espnow.h>

#define MY_NAME "MASTER_NODE"
#define MY_ROLE ESP_NOW_ROLE_MASTER
#define RECEIVER_ROLE ESP_NOW_ROLE_SLAVE
#define WIFI_CHANNEL 1


static lv_obj_t * main_label;
static void text_changer_b5ca5(lv_task_t * t); // IDK WTF THIS DO

#pragma region array of esp now MAC-addresses / devices (encrypted)

uint8_t receiver_address_array[1][6] { // 10 is the max for sending encrypted ESP NOW
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} // input your MAC address of the reciver you want to connect
}

#pragma endregion array of esp now MAC-addresses / devices (encrypted)

struct __attribute__(packed) dataPacket {
    int sensor1;
    int sensor2;
    float sensor3;
};

#pragma region AutoGenerated global stuff

// Begin AutoGenerated Globals - DO NOT EDIT BELOW
enum Screen_b5ca5 { SCR_b5ca5_HOME };	//Screen indexes
lv_obj_t *screen_b5ca5[1];    //screen pointers
GyroPalmLVGL form_b5ca5[1];   //screen helper methods
Screen_b5ca5 curScreen_b5ca5 = SCR_b5ca5_HOME;    //default screen
// End AutoGenerated Globals - DO NOT EDIT ABOVE

#pragma endregion AutoGenerated global stuff

// Begin AutoGenerated Callbacks - DO NOT EDIT BELOW


static void btn_event_handler_b5ca5(lv_obj_t * obj, lv_event_t event)
{
    if (event == LV_EVENT_CLICKED) {
        String btnName = lv_list_get_btn_text(obj);
		Serial.printf("Clicked: %s\n", btnName);

        switch (curScreen_b5ca5)
        {
            case SCR_b5ca5_HOME:
			    if (btnName == "send data"){ // sending info
                    //dataPacket packet;
        
                    //packet.sensor1 = 123;
                    //packet.sensor2 = 456;
                    //packet.sensor3 = 3.14;

                    //esp_now_send(receiver_address1, (uint8_t *) &packet, sizeof(packet));
                    lv_label_set_text(main_label, receiver_address_array[0].c_str); // change the txt to the mac address
                    // the func
                }

            break;

            default: break;
		}
	}
}

// End AutoGenerated Callbacks - DO NOT EDIT ABOVE

// Begin AutoGenerated Screens - DO NOT EDIT BELOW
void showApp_b5ca5(int page) {
    if ((Screen_b5ca5) page != curScreen_b5ca5) {
        form_b5ca5[curScreen_b5ca5].removeBar();    //remove old StatusBar before proceeding
    }

    switch (page)
    {
		case SCR_b5ca5_HOME:
        {
            //Draw screen UI
            curScreen_b5ca5 = (Screen_b5ca5) page;
            form_b5ca5[curScreen_b5ca5].init(screen_b5ca5[curScreen_b5ca5]);  //now defining screen items
            form_b5ca5[curScreen_b5ca5].createBar(barTask, lv_update_task);
            form_b5ca5[curScreen_b5ca5].setTime(gplm.getTime());
			main_label = form_b5ca5[curScreen_b5ca5].createLabel(0, -37, "Hello World");    //show element
			form_b5ca5[curScreen_b5ca5].createButton(0, 67, "send data", btn_event_handler_b5ca5, true, 214);    //show element

            form_b5ca5[curScreen_b5ca5].showScreen(ANIM_NONE);   //show the screen w/ no animation
        }
        break;


        default: break;
    }
    gplm.setScreen(&form_b5ca5[curScreen_b5ca5]);
    form_b5ca5[curScreen_b5ca5].setBarCallback(hide_b5ca5);
}
// End AutoGenerated Screens - DO NOT EDIT ABOVE

void show_b5ca5() {
	Serial.begin(115200);
    
	#pragma region AutoGenerated Start

    // Begin AutoGenerated Setup - DO NOT EDIT BELOW
    form[curScreen].clearLauncher();
    showApp_b5ca5(curScreen_b5ca5);
    tmr_b5ca5 = lv_task_create(lv_task_b5ca5, 100, LV_TASK_PRIO_LOWEST, NULL);
    // End AutoGenerated Setup - DO NOT EDIT ABOVE

    #pragma endregion AutoGenerated Start
    
    Serial.print("Initalizing:");
    Serial.println(MY_NAME);

    Serial.print("My MAC address is: ");
    Serial.println(WiFi.macAddress());

    if(esp_now_init() != 0){
        Serial.println("ESP NOW init failed");
        return;
    }

    esp_now_set_self_role(MY_ROLE);
    esp_now_register_send_cb(transmission_complete);
    esp_now_add_peer(receiver_address1, RECEIVER_ROLE, WIFI_CHANNEL, NULL, 0);

    Serial.println("Initialized")
    lv_label_set_text(main_label, "Initialized");
}

void loop_b5ca5() {
	Serial.println("Hello World");
	delay(1000);

	#pragma region AutoGenerated Start
    // Begin AutoGenerated Loop - DO NOT EDIT BELOW
    // End AutoGenerated Loop - DO NOT EDIT ABOVE
    #pragma endregion AutoGenerated Start
}

void transmission_complete(uint8_t * receiver_mac, uint8_t transmission_status){
    if (transmission_status == 0){
        Serial.println("Data sent");
    }
    else{
        Serial.print("Error Code: ");
        Serial.println(transmission_status);

    }

}

void hide_b5ca5(int barIntent) {
    if (barIntent == BAR_SWIPE_LEFT) {
        lv_task_del(tmr_b5ca5); //removes the task
        showApp(SCR_HOME);
    }
}
